PART
{
	name = greenhouse
	module = Part
	author = z
	
	// --- asset parameters ---
	mesh = model.mu
	rescaleFactor = 1.25

	// --- node definitions ---
	node_stack_top = 0.0, 1.61, 0.0, 0.0, 1.0, 0.0, 2
	node_stack_bottom = 0.0, -1.61, 0.0, 0.0, -1.0, 0.0, 2
	node_attach = 1.25, 0.0, 0.0, 1.0, 0.0, 0.0, 1

	
	// --- editor parameters ---
	//TechRequired = spaceExploration
	TechRequired = sustainability
	entryCost = 10400
	cost = 4000
	category = none
	subcategory = 0
	title = Garden in a Can GreenHouse
	manufacturer = Jeb Co. Light Industrials
	description = 2.5m Greenhouse, Garden in a Can kit, assembled and ready to use. 
	PhysicsSignificance = 1
	
	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,0
	
	// --- standard part parameters ---
	mass = 4.0
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 0.5
	crashTolerance = 45
	breakingForce = 280
	breakingTorque = 280
	maxTemp = 1700 // 2900
	fuelCrossFeed = True

	bulkheadProfiles = size1, srf
	tags = cck-lifesupport

	MODULE
	{
		name = ModuleRequiredExperiment
		requiredExperimentID = PlantRespirationStudy
		//biomes = one,two,three
		//requiredSitMask = 63
		inCurrentSituation = true
		uniqueBodies = false

		modulesInitiallyDisabled = ModuleDeployableSolarPanel, ModuleResourceConverter
	}
	
	MODULE
	{
		name = ModuleDeployableSolarPanel
		animationName = door
		sunTracking = true
		raycastTransformName = glass
		pivotName = glass
		isBreakable = false
		resourceName = ElectricCharge
		//chargeRate = 0.0005
		chargeRate = 1
	
		powerCurve
		{
			key = 206000000000 0 0 0
			key = 13599840256 1 0 0
			key = 68773560320 0.5 0 0
			key = 0 10 0 0
		}
	}
	
	MODULE
	{
		name = ModuleIFILifeSupport
		ConverterName = Greenhouse
		requiresAllInputs = true
		isAlwaysActive = false
		StartActionName = Turn UV Lights ON
		StopActionName = Turn UV Lights OFF
		AutoShutdown = true
		//statusGUIName = UV Lights

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 4
		}
		INPUT_RESOURCE
		{
			ResourceName = HiddenOrganicSlurry
			// Ratio = 0.00004630
			Ratio = 0.05
		}
		// The two output resources need to add up
		// to the input resource here
		OUTPUT_RESOURCE
		{
			ResourceName = HiddenLifeSupport
			#Ratio = 0.00004167
			Ratio = 0.045
			DumpExcess = true
		} 
		OUTPUT_RESOURCE
		{
			ResourceName = HiddenSludge
			#Ratio = 0.00000463
			Ratio = 0.005
			DumpExcess = true
		} 
	}
	
	RESOURCE
	{
		name = Sludge
		amount = 0
		maxAmount = 10
	}
	RESOURCE
	{
		name = OrganicSlurry
		amount = 0
		maxAmount = 10
	}
	RESOURCE
	{
		name = LifeSupport
		amount = 0
		maxAmount = 10
	}
	MODULE
	{
		name = IFI_Improved
	}
}
